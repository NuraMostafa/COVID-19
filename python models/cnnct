import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten
from keras.optimizers import Adam
from PIL import Image




import tensorflow as tf

import cv2
import os

import numpy as np

img_width, img_height = 224, 224
train_images = np.zeros((486, img_width, img_height, 3), dtype='uint8')
train_labels = np.zeros((486, 1), dtype='uint8')

train_Covid = np.zeros((243, img_width, img_height, 3), dtype='uint8')
train_Non_Covid = np.zeros((243, img_width, img_height, 3), dtype='uint8')

covidtrain = 0
noncovidtrain = 0

for x in range(486):
    if x % 2 == 0:
        imgcovid = os.listdir("D:/Graduation project/srs-20210710T173116Z-001/srs/covidtrain")
        img = cv2.imread("D:/Graduation project/srs-20210710T173116Z-001/srs/covidtrain/" + imgcovid[covidtrain])
        train_Covid[covidtrain] = cv2.resize(img, (224, 224))
        train_images[x] = cv2.resize(img, (224, 224))
        train_labels[x] = 1
        covidtrain = covidtrain + 1
        # print(train_images[x])
        # print ("image2",x)
    else:
        imgnoncovid = os.listdir("D:/Graduation project/srs-20210710T173116Z-001/srs/noncovidtrain")
        img = cv2.imread("D:/Graduation project/srs-20210710T173116Z-001/srs/noncovidtrain/" + imgnoncovid[noncovidtrain])
        img = cv2.medianBlur(img, 3)
        # print(img)
        # print("image")
        train_Non_Covid[noncovidtrain] = cv2.resize(img, (224, 224))
        train_images[x] = cv2.resize(img, (224, 224))
        train_labels[x] = 0
        noncovidtrain = noncovidtrain + 1
        # print(train_images[x])

# print(train_images,"sora")


#####################################################
# part2

test_labels = np.zeros((206, 1), dtype='uint8')
test_images = np.zeros((206, img_width, img_height, 3), dtype='uint8')

test_Covid = np.zeros((103, img_width, img_height, 3), dtype='uint8')
test_Non_Covid = np.zeros((103, img_width, img_height, 3), dtype='uint8')

covidtest = 0
noncovidtest = 0

for z in range(206):
    if z % 2 == 0:
        imagecovidtest = os.listdir("D:/Graduation project/srs-20210710T173116Z-001/srs/covidtest")
        img2 = cv2.imread("D:/Graduation project/srs-20210710T173116Z-001/srs/covidtest/" + imagecovidtest[covidtest])
        img2 = cv2.medianBlur(img2, 3)
        test_Covid[covidtest] = cv2.resize(img2, (224, 224))
        test_images[z] = cv2.resize(img2, (224, 224))
        test_labels[z] = 1
        covidtest = covidtest + 1

    else:
        imgnoncovidtest = os.listdir("D:/Graduation project/srs-20210710T173116Z-001/srs/noncovidtest")
        img2 = cv2.imread("D:/Graduation project/srs-20210710T173116Z-001/srs/noncovidtest/" + imgnoncovidtest[noncovidtest])
        img2 = cv2.medianBlur(img2, 3)
        test_Non_Covid[noncovidtest] = cv2.resize(img2, (224, 224))
        test_images[z] = cv2.resize(img2, (224, 224))
        test_labels[z] = 0
        noncovidtest = noncovidtest + 1




model = Sequential()
model.add(Conv2D(32, 3, padding="same", activation="relu", input_shape=(224, 224, 3)))
model.add(MaxPool2D())

model.add(Conv2D(32, 3, padding="same", activation="relu"))
model.add(MaxPool2D())

model.add(Conv2D(64, 3, padding="same", activation="relu"))
model.add(MaxPool2D())
model.add(Dropout(0.4))

model.add(Flatten())
model.add(Dense(128, activation="relu"))
model.add(Dense(2, activation="softmax"))

model.summary()
opt = Adam(lr=0.000001)
model.compile(optimizer=opt, loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])

results = model.fit(train_images, train_labels, batch_size=32, epochs=3)

results1 = model.evaluate(test_images, test_labels, batch_size=32)

predictions = model.predict_classes(test_images)
print(predictions)
# print(classification_report(test_labels, predictions, target_names = ['Covid (Class 1)','Non-Covid (Class 0)']))
# max_predictions = tf.argmax(predictions, axis=1)
print(tf.math.confusion_matrix(labels=test_labels, predictions=predictions))
#######################################################

from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image

# Helper libraries
import numpy as np


def classify(noranxx):
    img = image.load_img(noranxx, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_batch = np.expand_dims(img_array, axis=0)
    img_preprocessed = preprocess_input(img_batch)
    prediction = model.predict(img_preprocessed)
    print(prediction)
    result = np.argmax(prediction, axis=1)
    print(result)

    # print(result)
    if result == [1]:
        if 0.5 <= result <= 1.0:
            print("postive")
    else:
        print("Negative")


# classify("/content/images.jfif")

# def returnstring(result):
#     if 0.6 <= result <= 1.0:
#       print("postive")
